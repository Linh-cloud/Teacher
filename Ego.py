import pandas as pd
import tkinter as tk
from tkinter import filedialog, messagebox
import json

class TKBApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Ki·ªÉm tra th·ªùi kh√≥a bi·ªÉu")
        self.entries = []
        self.font_size = 10

        # T·∫°o c√°c n√∫t b·∫•m cho c√°c ch·ª©c nƒÉng
        self.load_button = tk.Button(root, text="üìÇ Nh·∫≠p file TKB", command=self.load_file)
        self.load_button.pack(pady=10)

        # Th√™m c√°c n√∫t b·∫•m ph√≥ng to v√† thu nh·ªè
        self.zoom_in_btn = tk.Button(root, text="üîç+", command=self.zoom_in)
        self.zoom_in_btn.pack(pady=5)

        self.zoom_out_btn = tk.Button(root, text="üîç‚àí", command=self.zoom_out)
        self.zoom_out_btn.pack(pady=5)


        self.check_button = tk.Button(root, text="üîç Ki·ªÉm tra tr√πng gi√°o vi√™n", command=self.check_duplicates, state="disabled")
        self.check_button.pack(pady=5)
        self.export_button = tk.Button(root, text="üìä Th·ªëng k√™ ng√†y ngh·ªâ GV", command=self.check_teachers_in_schedule, state="normal")
        self.export_button.pack(pady=5)

        # Frame ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng th·ªëng k√™
        self.frame_stat = tk.Frame(root)

        self.frame = tk.Frame(root)
        self.frame.pack(fill="both", expand=True)

    def load_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
        if not file_path:
            return

        try:
            df = pd.read_excel(file_path, sheet_name=0, header=None)

            # --- B·ªî SUNG ƒê·ªÇ L·∫§P ƒê·∫¶Y NA ·ªü c·ªôt "Th·ª©" ---
            df[0] = df[0].ffill()
            # ------------------------------------------

            # T√¨m danh s√°ch l·ªõp
            class_labels = []
            for i in range(2, df.shape[1], 2):
                label = df.iloc[0, i]
                if pd.notna(label):
                    class_labels.append(label)
            self.num_classes = len(class_labels)

            # T√°ch d·ªØ li·ªáu t·ª´ d√≤ng 3 tr·ªü ƒëi
            self.tkb_data = []
            for _, row in df.iloc[2:].iterrows():
                time_info = row.iloc[:2].tolist()
                class_data = []
                for i in range(2, 2 + self.num_classes * 2, 2):
                    subject = str(row[i]) if pd.notna(row[i]) else ""
                    teacher = str(row[i + 1]) if pd.notna(row[i + 1]) else ""
                    class_data.extend([subject, teacher])
                self.tkb_data.append(time_info + class_data)

            # X√≥a b·∫£ng c≈© (n·∫øu c√≥)
            for widget in self.frame.winfo_children():
                widget.destroy()

            self.render_table(class_labels)
            self.check_button.config(state="normal")

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc file: {e}")

        # G·ªçi update_idletasks ƒë·ªÉ bu·ªôc Tkinter l√†m m·ªõi giao di·ªán
        self.root.update_idletasks()

    def render_table(self, class_labels):
        canvas = tk.Canvas(self.frame)
        scrollbar_y = tk.Scrollbar(self.frame, orient="vertical", command=canvas.yview)
        scrollbar_x = tk.Scrollbar(self.frame, orient="horizontal", command=canvas.xview)
        scrollable_frame = tk.Frame(canvas)

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar_y.set, xscrollcommand=scrollbar_x.set)

        canvas.grid(row=0, column=0, sticky="nsew")
        scrollbar_y.grid(row=0, column=1, sticky="ns")
        scrollbar_x.grid(row=1, column=0, sticky="ew")

        self.frame.grid_rowconfigure(0, weight=1)
        self.frame.grid_columnconfigure(0, weight=1)

        # Ti√™u ƒë·ªÅ "Th·ª©" v√† "Ti·∫øt"
        tk.Label(scrollable_frame, text="Th·ª©", bg="#d9edf7", relief="ridge", font=("Arial", 12, "bold")).grid(row=0, column=0, sticky="nsew")
        tk.Label(scrollable_frame, text="Ti·∫øt", bg="#d9edf7", relief="ridge", font=("Arial", 12, "bold")).grid(row=0, column=1, sticky="nsew")

        # Ti√™u ƒë·ªÅ c√°c ng√†y trong tu·∫ßn
        for idx, label in enumerate(class_labels):
            tk.Label(scrollable_frame, text=label, bg="#d9edf7", relief="ridge", font=("Arial", 12, "bold")).grid(row=0, column=2 + idx * 2, columnspan=2, sticky="nsew")

        # Ti√™u ƒë·ªÅ M√¥n | GV d·∫°y
        tk.Label(scrollable_frame, text="", relief="ridge").grid(row=1, column=0, sticky="nsew")
        tk.Label(scrollable_frame, text="", relief="ridge").grid(row=1, column=1, sticky="nsew")
        for i in range(self.num_classes):
            tk.Label(scrollable_frame, text="M√¥n", bg="#f7f7f7", relief="ridge", font=("Arial", 10)).grid(row=1, column=2 + i * 2, sticky="nsew")
            tk.Label(scrollable_frame, text="GV d·∫°y", bg="#f7f7f7", relief="ridge", font=("Arial", 10)).grid(row=1, column=3 + i * 2, sticky="nsew")

        # D·ªØ li·ªáu th·ªùi kh√≥a bi·ªÉu
        self.entries = []
        for row_idx, row_data in enumerate(self.tkb_data):
            row_entries = []
            for col_idx, cell in enumerate(row_data):
                entry = tk.Text(scrollable_frame, width=12, height=1, font=("Arial", self.font_size))
                entry.insert("1.0", cell)
                entry.grid(row=row_idx + 2, column=col_idx, sticky="nsew", padx=1, pady=1)
                row_entries.append(entry)
            self.entries.append(row_entries)

    def check_duplicates(self):
        for row in self.entries:
            teacher_seen = {}
            for i, cell in enumerate(row[2:], start=2):
                if (i - 2) % 2 == 1:
                    cell.config(bg="white")
            for i, cell in enumerate(row[2:], start=2):
                if (i - 2) % 2 == 1:
                    teacher = cell.get("1.0", "end").strip()
                    if teacher:
                        if teacher in teacher_seen:
                            cell.config(bg="salmon")
                            teacher_seen[teacher].config(bg="salmon")
                        else:
                            teacher_seen[teacher] = cell

    def generate_teacher_day_schedule(self):
        teacher_day_schedule = {}

        # L·∫•y th√¥ng tin gi√°o vi√™n d·∫°y trong t·ª´ng ng√†y t·ª´ th·ªùi kh√≥a bi·ªÉu
        for row_idx, row_data in enumerate(self.tkb_data):
            weekday = row_data[0]  # L·∫•y ng√†y trong tu·∫ßn (Th·ª© 2, Th·ª© 3, ...)

            if weekday not in teacher_day_schedule:
                teacher_day_schedule[weekday] = []

            # Duy·ªát qua c√°c c·ªôt, b·∫Øt ƒë·∫ßu t·ª´ c·ªôt 3 ƒë·ªÉ l·∫•y th√¥ng tin gi√°o vi√™n
            for col_idx in range(2, len(row_data), 2):  # B∆∞·ªõc 2 ƒë·ªÉ l·∫•y gi√°o vi√™n
                teacher = row_data[col_idx + 1]  # Gi√°o vi√™n ·ªü c·ªôt sau m√¥n h·ªçc
                if teacher and teacher not in teacher_day_schedule[weekday]:
                    teacher_day_schedule[weekday].append(teacher)

        # Tr·∫£ v·ªÅ dictionary ch·ª©a gi√°o vi√™n theo t·ª´ng ng√†y, ho·∫∑c dictionary tr·ªëng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
        return teacher_day_schedule if teacher_day_schedule else {}

    def check_teachers_in_schedule(self):
        # ƒê·ªçc danh s√°ch gi√°o vi√™n t·ª´ t·ªáp JSON
        try:
            with open("teachers_list.json", "r", encoding="utf-8") as f:
                existing_teachers = json.load(f)["Gi√°o vi√™n"]
        except FileNotFoundError:
            existing_teachers = ["B√≠ch", "H·∫£i", "T.Hu·ªá", "Linh", "Q.Anh", "√çch", "Ph∆∞·ª£ng", "N.Hu·ªá", "Nh·∫°n", "S·ªπ", "Tr√¢m", "Xu√¢n", "H∆∞∆°ng", "Ninh", "Nh√¢m", "V√¢n", "Lan", "Tu√¢n", "Nghi·ªáp", "Ngoan", "H∆∞·ªùng", "√Ånh", "Nga", "Y·∫øn", "Th·ª•y"]

        # L·∫•y th√¥ng tin gi√°o vi√™n d·∫°y trong t·ª´ng ng√†y t·ª´ th·ªùi kh√≥a bi·ªÉu
        teacher_day_schedule = self.generate_teacher_day_schedule()

        # Ki·ªÉm tra n·∫øu teacher_day_schedule l√† None ho·∫∑c r·ªóng
        if not teacher_day_schedule:
            print("Kh√¥ng c√≥ d·ªØ li·ªáu gi√°o vi√™n trong th·ªùi kh√≥a bi·ªÉu.")
            return

        # T·∫°o dictionary ƒë·ªÉ l∆∞u gi√°o vi√™n ngh·ªâ (kh√¥ng c√≥ trong danh s√°ch d·∫°y)
        teacher_off_schedule = {weekday: [] for weekday in existing_teachers}

        # Duy·ªát qua t·∫•t c·∫£ gi√°o vi√™n ƒë√£ c√≥ v√† t√¨m ra gi√°o vi√™n kh√¥ng d·∫°y trong ng√†y
        for teacher in existing_teachers:
            for weekday, teachers in teacher_day_schedule.items():
                if teacher not in teachers:
                    teacher_off_schedule[teacher].append(weekday)

        # T·∫°o c·ª≠a s·ªï m·ªõi ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
        result_window = tk.Toplevel(self.root)
        result_window.title("Th√¥ng tin ng√†y ngh·ªâ c·ªßa gi√°o vi√™n")

        # Cho ph√©p c·ª≠a s·ªï thay ƒë·ªïi k√≠ch th∆∞·ªõc
        result_window.resizable(True, True)  # Cho ph√©p thay ƒë·ªïi k√≠ch th∆∞·ªõc c·ª≠a s·ªï

        # Th√™m Scrollbar v√†o c·ª≠a s·ªï
        canvas = tk.Canvas(result_window)
        scrollbar_y = tk.Scrollbar(result_window, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas)

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar_y.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar_y.pack(side="right", fill="y")
        scrollable_frame.pack(fill="both", expand=True)  # Th√™m d√≤ng n√†y, n·∫øu ch∆∞a c√≥!

        # Thay ƒë·ªïi chi·ªÅu cao c·ªßa Text widget
        result_text = tk.Text(scrollable_frame, font=("Arial", 10), wrap="word")
        result_text.pack(fill="both", expand=True)

        # Ki·ªÉm tra v√† hi·ªÉn th·ªã th√¥ng tin
        for teacher, days_off in teacher_off_schedule.items():
            if days_off:
                days_off_str = ', '.join(str(day) for day in days_off)
                result_text.insert(tk.END, f"{teacher}: {days_off_str}\n")
            else:
                result_text.insert(tk.END, f"{teacher}: Kh√¥ng c√≥ ng√†y ngh·ªâ\n")

        result_text.config(state=tk.DISABLED)  # Kh√¥ng cho ph√©p ch·ªânh s·ª≠a n·ªôi dung

        # Tr·∫£ v·ªÅ danh s√°ch gi√°o vi√™n ngh·ªâ
        return teacher_off_schedule

    def zoom_in(self):
        self.font_size += 1  # TƒÉng k√≠ch th∆∞·ªõc font
        self.apply_zoom()

    def zoom_out(self):
        if self.font_size > 6:
            self.font_size -= 1  # Gi·∫£m k√≠ch th∆∞·ªõc font
        self.apply_zoom()

    def apply_zoom(self):
        for row in self.entries:
            for cell in row:
                # C·∫≠p nh·∫≠t ph√¥ng ch·ªØ cho t·ª´ng √¥ trong b·∫£ng
                cell.config(font=("Arial", self.font_size))
        
        # G·ªçi update_idletasks ƒë·ªÉ bu·ªôc Tkinter l√†m m·ªõi giao di·ªán
        self.root.update_idletasks()

if __name__ == "__main__":
    root = tk.Tk()
    app = TKBApp(root)
    root.mainloop()
